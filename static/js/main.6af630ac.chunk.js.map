{"version":3,"sources":["AppContext.js","components/Header.js","hooks/useHover.js","components/CartItem.js","pages/Cart.js","components/Image.js","pages/Photos.js","utils/index.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","React","createContext","AppContextProvider","children","useState","photos","setPhotos","cartItems","setCartItems","totalCost","setTotalCost","url","useEffect","a","fetch","response","json","data","fetchData","then","length","Provider","value","toggleFavorite","id","updatedArray","map","photo","console","log","isFavorite","addCartItem","img","prevCart","removeCartItem","filter","item","Header","useContext","to","className","useHover","hovered","setHovered","ref","useRef","enter","leave","hoverRef","current","addEventListener","removeEventListener","CartItem","trashDisplay","onClick","src","width","Cart","cartItemElements","key","isOrdering","setIsOrdering","orderDisable","toLocaleString","style","currency","disabled","setTimeout","Image","imgObj","some","Photos","imageElements","index","i","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6af630ac.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\r\n\r\nconst AppContext = React.createContext();\r\n\r\nfunction AppContextProvider({ children }) {\r\n    const [photos, setPhotos] = useState([]);\r\n    const [cartItems, setCartItems] = useState([]);\r\n    const [totalCost, setTotalCost] = useState(0);\r\n\r\n    // Retrieve data with FETCH\r\n    // Image json does not have alt-text, consider for future update\r\n    const url = 'https://raw.githubusercontent.com/bobziroll/scrimba-react-bootcamp-images/master/images.json'\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const response = await fetch(url);\r\n            const data = await response.json();\r\n            return data;\r\n        }\r\n        fetchData()\r\n            .then((data) => setPhotos(data));\r\n    }, []) // Fetch on mount only\r\n\r\n    function toggleFavorite(id) {\r\n        const updatedArray = photos.map(photo => {\r\n            if (photo.id === id) {\r\n                console.log(id)\r\n                console.log(!photo.isFavorite)\r\n                return { ...photo, isFavorite: !photo.isFavorite }\r\n            }\r\n            return photo\r\n        })\r\n        setPhotos(() => updatedArray);\r\n    }\r\n\r\n    // Cart, Checkout, Ordering\r\n\r\n    function addCartItem(img) {\r\n        setCartItems(prevCart => ([...prevCart, img]))\r\n    }\r\n\r\n    function removeCartItem(id) {\r\n        setCartItems(prevCart => prevCart.filter(item => item.id !== id))\r\n    }\r\n\r\n    useEffect(() => {\r\n        setTotalCost(() => cartItems.length * 5.99)\r\n    }, [cartItems]) // Fetch on mount only\r\n\r\n    return (\r\n        <AppContext.Provider value={{ photos, toggleFavorite, addCartItem, removeCartItem, setCartItems, cartItems, totalCost }}>\r\n            {children}\r\n        </AppContext.Provider>\r\n    )\r\n}\r\n\r\nexport { AppContextProvider, AppContext }","import React, { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AppContext } from \"../AppContext\";\r\n\r\nfunction Header() {\r\n    const { cartItems } = useContext(AppContext)\r\n\r\n    function cartIcon() {\r\n        if (cartItems.length > 0) {\r\n            return <i className=\"ri-shopping-cart-fill ri-fw ri-2x\"></i>\r\n        } else if (cartItems.length === 0) {\r\n            return <i className=\"ri-shopping-cart-line ri-fw ri-2x\"></i>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <header>\r\n            <Link to='/'>\r\n                <h2>Pic Some</h2>\r\n            </Link>\r\n            <Link to='/cart'>\r\n                {cartIcon()}\r\n            </Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import { useState, useRef, useEffect } from \"react\"\r\n\r\nfunction useHover() {\r\n    const [hovered, setHovered] = useState(false);\r\n    const ref = useRef(null);\r\n\r\n    function enter() {\r\n        setHovered(true);\r\n    }\r\n\r\n    function leave() {\r\n        setHovered(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const hoverRef = ref.current\r\n        hoverRef.addEventListener(\"mouseenter\", enter);\r\n        hoverRef.addEventListener(\"mouseleave\", leave);\r\n\r\n        return () => {\r\n            hoverRef.removeEventListener(\"mouseenter\", enter);\r\n            hoverRef.removeEventListener(\"mouseleave\", leave);\r\n        }\r\n    }, [])\r\n\r\n    return [hovered, ref]\r\n}\r\n\r\nexport default useHover;","import React, { useContext } from \"react\";\r\nimport PropTypes from \"prop-types\"\r\nimport { AppContext } from \"../AppContext\";\r\nimport useHover from \"../hooks/useHover\";\r\n\r\n\r\nfunction CartItem({ item }) {\r\n    const { removeCartItem } = useContext(AppContext);\r\n    const [hovered, ref] = useHover();\r\n\r\n    const trashDisplay = `ri-delete-bin-${hovered ? \"fill\" : \"line\"}`\r\n\r\n    return (\r\n        <div className=\"cart-item\">\r\n            <i\r\n                ref={ref}\r\n                className={trashDisplay}\r\n                onClick={() => removeCartItem(item.id)}\r\n            ></i>\r\n            <img src={item.url} width=\"130px\" />\r\n            <p>$5.99</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nCartItem.propTypes = {\r\n    item: PropTypes.shape({\r\n        id: PropTypes.string.isRequired\r\n    })\r\n}\r\n\r\nexport default CartItem;","import React, { useContext, useState } from \"react\";\r\n\r\nimport { AppContext } from \"../AppContext\";\r\nimport CartItem from \"../components/CartItem\";\r\n\r\n\r\nfunction Cart() {\r\n    const { cartItems, setCartItems, totalCost } = useContext(AppContext);\r\n    const cartItemElements = cartItems.map(item => (\r\n        <CartItem key={item.id} item={item} />\r\n    ))\r\n    const [isOrdering, setIsOrdering] = useState(false);\r\n\r\n    function placeOrder() {\r\n        setIsOrdering(true);\r\n        setTimeout(() => {\r\n            // Simulate order network calls\r\n            setCartItems([]); // empty cart\r\n            setIsOrdering(false);\r\n        }, 3000)\r\n    }\r\n\r\n    const orderDisable = cartItems.length === 0\r\n    console.log(orderDisable)\r\n\r\n    return (\r\n        <main className=\"cart-page\" >\r\n            <h1>Check out</h1>\r\n            {cartItemElements}\r\n            <p className=\"total-cost\" > Total: {totalCost.toLocaleString(\"en-US\", { style: \"currency\", currency: \"USD\" })\r\n            }</p>\r\n            <div className=\"order-button\">\r\n                <button disabled={orderDisable} onClick={placeOrder}>{isOrdering ? \"Ordering...\" : \"Place Order\"}</button>\r\n            </div>\r\n            {orderDisable && <p>You have no items in your cart.</p>}\r\n        </main >\r\n    )\r\n}\r\n\r\nexport default Cart;","import React, { useContext } from \"react\";\r\nimport { AppContext } from \"../AppContext\";\r\nimport PropTypes from \"prop-types\";\r\nimport useHover from \"../hooks/useHover\";\r\n\r\nfunction Image({ imgObj, className }) {\r\n    const { toggleFavorite, addCartItem, removeCartItem, cartItems } = useContext(AppContext);\r\n    const [hovered, ref] = useHover();\r\n\r\n    function isInCart() {\r\n        const itemExists = cartItems.some(item => item.id === imgObj.id);\r\n        return itemExists\r\n    }\r\n\r\n    function heartIcon() {\r\n        if (imgObj.isFavorite) {\r\n            return <i className=\"ri-heart-fill favorite\" onClick={() => toggleFavorite(imgObj.id)}></i>\r\n        } else if (hovered) {\r\n            return <i className=\"ri-heart-line favorite\" onClick={() => toggleFavorite(imgObj.id)}></i>\r\n        }\r\n    }\r\n\r\n    function cartIcon() {\r\n        if (isInCart()) {\r\n            return <i className=\"ri-shopping-cart-fill cart\" onClick={() => removeCartItem(imgObj.id)}></i>\r\n        } else if (hovered) {\r\n            return <i className=\"ri-add-circle-line cart\" onClick={() => addCartItem(imgObj)}></i>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            ref={ref}\r\n            className={`${className} image-container`}\r\n        >\r\n            <img src={imgObj.url} className=\"image-grid\" />\r\n            {heartIcon()}\r\n            {cartIcon()}\r\n        </div>\r\n    )\r\n}\r\n\r\n// Type Checking\r\nImage.propTypes = {\r\n    className: PropTypes.string,\r\n    img: PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        url: PropTypes.string.isRequired,\r\n        isFavorite: PropTypes.bool\r\n    })\r\n}\r\n\r\nexport default Image","import React, { useContext } from \"react\";\r\nimport { AppContext } from \"../AppContext\"\r\nimport Image from \"../components/Image\"\r\nimport { getClass } from \"../utils\"\r\n\r\nfunction Photos() {\r\n    // Get the allPhotos array from context\r\n    const { photos } = useContext(AppContext)\r\n    const imageElements = photos.map((imgObj, index) => (\r\n        <Image key={imgObj.id} imgObj={imgObj} className={getClass(index)} />\r\n    ))\r\n    // map over it, creating <Image /> elements of the component we just made\r\n    // <Image key={???} img={<full image object here>} className={getClass(<index of image>)} />\r\n    return (\r\n        <main className=\"photos\">\r\n            {imageElements}\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Photos;","export function getClass(i) {\r\n    if (i % 5 === 0) {\r\n        return 'big';\r\n    }\r\n    else if (i % 6 === 0) {\r\n        return 'wide'\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Cart from './pages/Cart';\nimport Photos from './pages/Photos';\nimport { Switch, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n\n      <Switch>\n        <Route exact path=\"/\">\n          <Photos />\n        </Route>\n        <Route exact path=\"/cart\">\n          <Cart />\n        </Route>\n      </Switch>\n    </div>\n\n\n\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { AppContextProvider } from \"./AppContext\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppContextProvider>\n      <Router>\n        <App />\n      </Router>\n    </AppContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}